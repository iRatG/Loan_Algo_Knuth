import numpy as np
import time
import math
from collections import deque

class FinancialKnuthAlgorithms:
    def __init__(self):
        self.kdtree = None
        self.min_vals = None
        self.max_vals = None
        self.best_k = 5
        self.threshold = 0.22
        self.entropy_cache = {}
        self.gini_cache = {}
        self.distance_cache = {}
    
    # Загрузка данных с использованием инкрементального подсчета статистик
    def load_data(self, filename, sample_size=10000):
        data = np.genfromtxt(filename, delimiter=',', skip_header=1, dtype=float)
        np.random.shuffle(data)
        return data[:sample_size, 1:]
    
    # Трехпутевая быстрая сортировка (Том 3, раздел 5.2.2)
    def quicksort_3way(self, arr, axis, low=0, high=None):
        if high is None:
            high = len(arr) - 1
            
        if low < high:
            lt, gt = self._partition3(arr, axis, low, high)
            self.quicksort_3way(arr, axis, low, lt - 1)
            self.quicksort_3way(arr, axis, gt + 1, high)
        return arr
    
    def _partition3(self, arr, axis, low, high):
        pivot = arr[high][axis]
        lt = low      # Индекс первого элемента равного pivot
        gt = high     # Индекс последнего элемента равного pivot
        i = low       # Текущий индекс
        
        while i <= gt:
            if arr[i][axis] < pivot:
                arr[i], arr[lt] = arr[lt], arr[i]
                lt += 1
                i += 1
            elif arr[i][axis] > pivot:
                arr[i], arr[gt] = arr[gt], arr[i]
                gt -= 1
            else:
                i += 1
                
        return lt, gt
    
    # Мемоизация для энтропии и индекса Джини
    def entropy(self, p):
        if p <= 0 or p >= 1:
            return 0
        if p in self.entropy_cache:
            return self.entropy_cache[p]
        
        result = -p * math.log2(p) - (1-p) * math.log2(1-p)
        self.entropy_cache[p] = result
        return result
    
    def gini(self, p):
        if p in self.gini_cache:
            return self.gini_cache[p]
        
        result = 2 * p * (1 - p)
        self.gini_cache[p] = result
        return result
    
    # Узел KD-дерева
    class KDNode:
        __slots__ = ('point', 'left', 'right', 'axis')
        
        def __init__(self, point, left=None, right=None, axis=None):
            self.point = point
            self.left = left
            self.right = right
            self.axis = axis
    
    # Построение KD-дерева с трехпутевой сортировкой
    def build_kdtree(self, points, depth=0):
        if len(points) == 0:
            return None
        
        k = len(points[0]) - 1
        axis = depth % k
        
        # Используем трехпутевую быструю сортировку
        self.quicksort_3way(points, axis)
        
        median = len(points) // 2
        return self.KDNode(
            point=points[median],
            left=self.build_kdtree(points[:median], depth + 1),
            right=self.build_kdtree(points[median+1:], depth + 1),
            axis=axis
        )
    
    # КМП-алгоритм для поиска шаблонов (Том 1, раздел 1.3.5)
    def kmp_search(self, text, pattern):
        n = len(text)
        m = len(pattern)
        if m == 0:
            return 0
        if n < m:
            return -1
        
        # Префикс-функция
        pi = [0] * m
        k = 0
        for q in range(1, m):
            while k > 0 and pattern[k] != pattern[q]:
                k = pi[k-1]
            if pattern[k] == pattern[q]:
                k += 1
            pi[q] = k
        
        # Поиск шаблона
        q = 0
        for i in range(n):
            while q > 0 and pattern[q] != text[i]:
                q = pi[q-1]
            if pattern[q] == text[i]:
                q += 1
            if q == m:
                return i - m + 1
        
        return -1
    
    # Алгоритм Карацубы для умножения больших чисел (Том 2, раздел 4.3.3)
    def karatsuba_multiply(self, x, y):
        if x < 10 or y < 10:
            return x * y
        
        n = max(len(str(x)), len(str(y)))
        m = n // 2
        
        high1, low1 = divmod(x, 10**m)
        high2, low2 = divmod(y, 10**m)
        
        z0 = self.karatsuba_multiply(low1, low2)
        z1 = self.karatsuba_multiply((low1 + high1), (low2 + high2))
        z2 = self.karatsuba_multiply(high1, high2)
        
        return (z2 * 10**(2*m)) + ((z1 - z2 - z0) * 10**m) + z0
    
    # Итеративный обход дерева вместо рекурсивного
    def iterative_knn_search(self, query, k=5):
        if self.kdtree is None:
            return []
        
        best = []  # (distance_sq, point)
        stack = deque([self.kdtree])
        current_max_sq = float('inf')
        
        while stack:
            node = stack.pop()
            if node is None:
                continue
            
            # Кеширование расстояний
            cache_key = (tuple(node.point[:-1]), tuple(query[:-1]))
            if cache_key in self.distance_cache:
                d_sq = self.distance_cache[cache_key]
            else:
                d_sq = self.squared_euclidean_distance(node.point, query)
                self.distance_cache[cache_key] = d_sq
            
            # Обновление лучших соседей
            if len(best) < k:
                best.append((d_sq, node.point))
                if len(best) == k:
                    current_max_sq = max(best, key=lambda x: x[0])[0]
            elif d_sq < current_max_sq:
                # Находим и заменяем худшего соседа
                max_idx = 0
                max_val = best[0][0]
                for i in range(1, k):
                    if best[i][0] > max_val:
                        max_val = best[i][0]
                        max_idx = i
                best[max_idx] = (d_sq, node.point)
                current_max_sq = max(best, key=lambda x: x[0])[0]
            
            # Определение порядка обхода
            axis = node.axis
            diff = query[axis] - node.point[axis]
            if diff <= 0:
                close = node.left
                away = node.right
            else:
                close = node.right
                away = node.left
            
            # Добавляем в стек в обратном порядке
            if away is not None and (len(best) < k or diff**2 < current_max_sq):
                stack.append(away)
            if close is not None:
                stack.append(close)
        
        # Конвертация квадратов расстояний в настоящие расстояния
        return [(math.sqrt(d_sq), point) for d_sq, point in best]
    
    # Евклидово расстояние с использованием Карацубы для больших чисел
    def squared_euclidean_distance(self, a, b):
        a_arr = np.array(a[:-1])
        b_arr = np.array(b[:-1])
        
        # Для больших чисел используем алгоритм Карацубы
        if np.any(a_arr > 10**6) or np.any(b_arr > 10**6):
            diff = a_arr - b_arr
            return sum(self.karatsuba_multiply(int(x), int(x)) for x in diff)
        
        return np.sum((a_arr - b_arr) ** 2)
    
    # Весовое голосование с использованием энтропии
    def weighted_voting(self, neighbors):
        total_weight_0 = 0
        total_weight_1 = 0
        
        for dist, point in neighbors:
            # Вес = 1 / (расстояние + энтропия)
            entropy = self.entropy(point[-1])
            weight = 1 / (dist + entropy + 1e-8)
            
            if point[-1] == 0:
                total_weight_0 += weight
            else:
                total_weight_1 += weight
        
        return total_weight_1 / (total_weight_0 + total_weight_1)
    
    # Инкрементальный расчет статистик для разбиения
    def incremental_statistics(self, data, feature_idx, threshold):
        left_counts = [0, 0]
        right_counts = [0, 0]
        
        for point in data:
            label = int(point[-1])
            if point[feature_idx] < threshold:
                left_counts[label] += 1
            else:
                right_counts[label] += 1
        
        total_left = sum(left_counts)
        total_right = sum(right_counts)
        
        # Расчет индекса Джини с мемоизацией
        p_left = left_counts[1] / total_left if total_left > 0 else 0
        p_right = right_counts[1] / total_right if total_right > 0 else 0
        
        gini_left = self.gini(p_left)
        gini_right = self.gini(p_right)
        
        total = total_left + total_right
        return (total_left/total) * gini_left + (total_right/total) * gini_right
    
    # Основной рабочий процесс
    def run(self):
        # Загрузка данных
        data = self.load_data('UCI_Credit_Card.csv', sample_size=10000)
        
        # Нормализация данных
        self.min_vals = np.min(data[:, :-1], axis=0)
        self.max_vals = np.max(data[:, :-1], axis=0)
        range_vals = self.max_vals - self.min_vals
        range_vals[range_vals == 0] = 1
        scaled = (data[:, :-1] - self.min_vals) / range_vals
        processed_data = np.column_stack((scaled, data[:, -1]))
        
        # Построение KD-дерева
        start_time = time.time()
        self.kdtree = self.build_kdtree(processed_data.tolist())
        print(f"KD-дерево построено за {time.time() - start_time:.2f} сек")
        
        # Пример использования КМП для поиска паттернов
        # (В реальном проекте можно искать в текстовых описаниях транзакций)
        text = "credit card transaction payment default bank"
        pattern = "default"
        kmp_result = self.kmp_search(text, pattern)
        print(f"Паттерн '{pattern}' найден в позиции: {kmp_result}")
        
        # Пример использования алгоритма Карацубы
        num1 = 123456789
        num2 = 987654321
        karatsuba_result = self.karatsuba_multiply(num1, num2)
        print(f"Результат умножения {num1} * {num2} = {karatsuba_result}")
        
        # Тестирование на случайном клиенте
        sample_client = processed_data[0][:-1]
        neighbors = self.iterative_knn_search(np.append(sample_client, 0), self.best_k)
        probability = self.weighted_voting(neighbors)
        
        print(f"\nВероятность дефолта: {probability:.4f}")
        print(f"Рекомендация: {'Одобрить' if probability < self.threshold else 'Отказать'}")
        print(f"Фактический результат: {'Дефолт' if processed_data[0][-1] == 1 else 'Платежеспособен'}")
        
        # Пример инкрементальной статистики
        feature_idx = 0  # LIMIT_BAL
        threshold = 0.5  # Среднее значение
        gini_index = self.incremental_statistics(processed_data, feature_idx, threshold)
        print(f"\nИндекс Джини для признака {feature_idx}: {gini_index:.4f}")

# Запуск
if __name__ == "__main__":
    model = FinancialKnuthAlgorithms()
    model.run()